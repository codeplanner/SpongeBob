/*
Copyright (c) <#= DateTime.Now.Year #> 
# Ulf Tomas Bjorklund

# http://twitter.com/ulfbjo

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
<#
	foreach(string ns in Model.ExtraUsings.Split(','))
	{
	#>
using <#= ns #>;
	<#
	}
#>
//IMPORTANT - Modifications to this file may be overwritten:
//If you need to implement your own logic/code do it in a partial class/interface.    
namespace <#= Model.Namespace #>
{
    /// <summary>
    /// The generic base interface for all repositories...
    /// Purpose:
    /// - Implement this on the repository... Regardless of datasource... Xml, MSSQL, MYSQL etc..
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public interface IRepository<T>
    {
        /// <summary>
        /// Returns all persistent entities of type T.
        /// </summary>
        /// <returns></returns>
        IQueryable<T> GetAll();

        /// <summary>
        /// Return all persistent entities of type T without tracking.
        /// </summary>
        /// <returns></returns>
        IQueryable<T> GetAllReadOnly();

        /// <summary>
        /// Retrieves an entity (T) from the repository by id.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        T GetById(int id);

        /// <summary>
        /// Adds a new entity (T) and returns it´s id.
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        void SaveOrUpdate(T entity);

        /// <summary>
        /// Remove an entity (T) and persist changes into repository.
        /// </summary>
        /// <param name="entity"></param>
        void Delete(T entity);

		/// <summary>
        /// Remove an entity (T) and persist changes into repository.
        /// </summary>
        /// <param name="id"></param>
        void Delete(int id);

        /// <summary>
        /// Gives the possibility to search entities with strongly typed expressions.
        /// </summary>
        /// <param name="expression"></param>
        /// <param name="maxHits"></param>
        /// <returns></returns>
        IEnumerable<T> Find(Func<T, bool> expression, int maxHits = 100);

        /// <summary>
        /// Fakes fulltext search, kindof
        /// </summary>
        /// <param name="searchKey"></param>
        /// <param name="exactMatch"></param>
        /// <returns></returns>
        IQueryable<T> Search(string searchKey, bool exactMatch);
		
		/// <summary>
        /// Returns a specific page with entities of type T
        /// </summary>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        IPage<T> Page(int page = 1, int pageSize = 10);
    }
}