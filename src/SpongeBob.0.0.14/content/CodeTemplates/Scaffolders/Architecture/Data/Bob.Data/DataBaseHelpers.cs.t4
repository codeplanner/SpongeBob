<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

namespace <#= Model.Namespace #>
{
    public enum SqlOperators
    {
        Or,
        And
    }

    public static class DataBaseHelpers
    {
        public static IQueryable<T> FullTextSearch<T>(this IQueryable<T> queryable, string searchKey, bool exactMatch, SqlOperators sqlOperators)
        {
            ParameterExpression parameter = Expression.Parameter(typeof(T), "c");

            MethodInfo containsMethod = typeof(string).GetMethod("Contains", new Type[] { typeof(string) });
            //MethodInfo toStringMethod = typeof(object).GetMethod("ToString", new Type[] { });

            var publicProperties = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly).Where(p => p.PropertyType == typeof(string));
            Expression operatorExpressions = null;

            string[] searchKeyParts;
            if (exactMatch)
            {
                searchKeyParts = new[] { searchKey };
            }
            else
            {
                searchKeyParts = searchKey.Split(' ');
            }

            foreach (var property in publicProperties)
            {
                Expression nameProperty = Expression.Property(parameter, property);
                foreach (var searchKeyPart in searchKeyParts.Select(p => p.Trim()))
                {
                    Expression searchKeyExpression = Expression.Constant(searchKeyPart);
                    Expression callContainsMethod = Expression.Call(nameProperty, containsMethod, searchKeyExpression);
                    if (operatorExpressions == null)
                    {
                        operatorExpressions = callContainsMethod;
                    }
                    else
                    {
                        if(sqlOperators == SqlOperators.Or)
                            operatorExpressions = Expression.Or(operatorExpressions, callContainsMethod);
                        if (sqlOperators == SqlOperators.And)
                            operatorExpressions = Expression.And(operatorExpressions, callContainsMethod);
                    }
                }
            }

            MethodCallExpression whereCallExpression = Expression.Call(
                typeof(Queryable),
                "Where",
                new Type[] { queryable.ElementType },
                queryable.Expression,
                Expression.Lambda<Func<T, bool>>(operatorExpressions, new ParameterExpression[] { parameter }));

            return queryable.Provider.CreateQuery<T>(whereCallExpression);
        }
    }
}